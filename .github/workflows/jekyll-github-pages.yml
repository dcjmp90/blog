Moncef BelyamaniAbout Articles Praise Talks 
Making GitHub Pages Work With Jekyll 4+ and Any Theme and Plugin
jekyll ruby github beginner
GitHub Pages makes it easy to publish and host a Jekyll site for free. In theory, at least. In my Beginnerâ€™s Guide To Bundler and Gemfiles, we saw how the official GitHub documentation contains incorrect or confusing instructions that can prevent people from running the Jekyll site at all, whether locally (meaning on their computer) or on GitHub Pages.

Another thing we learned is that the github-pages gem only supports specific versions of Jekyll and other gems. It also only supports specific themes and plugins. It can be frustrating to find a cool plugin that adds some needed functionality, only to find out that it doesnâ€™t work with the github-pages gem. It can also be time-consuming to look for themes that both fit your needs and that are compatible with github-pages.

When you create a new Jekyll project from the command line with jekyll new, the github-pages gem is disabled by default, but if you push the entire project to GitHub, it will still generate your site on GitHub Pages. Having the github-pages gem enabled in your Gemfile is not a requirement to be able to publish your site to GitHub Pages. What is not obvious is that when you push your project to GitHub, it gets built in the cloud by GitHub using the github-pages gem.

If your site is using different versions of gems, or unsupported plugins, you might be surprised that your site works fine locally, but that it doesnâ€™t match what shows up on GitHub Pages. Sometimes, the site might fail to build entirely on GitHub Pages.

So, if we want to use the latest and greatest Jekyll, and any theme and plugin we want, while still taking advantage of GitHubâ€™s free hosting, is that possible? Yes! But first, it helps to understand how GitHub Pages and static site generators in general work.

When you run bundle exec jekyll serve to view your site locally in a browser, Jekyll is converting the content in your Markdown files into HTML files, which is what the browser needs to display your site. Similarly, when you run bundle exec jekyll build, it creates all the necessary files to display your site in a browser, in a folder called _site. To make your site available on the internet for the world to see, you need to place the contents of the _site folder on a computer that can serve those files to the public. This is what GitHub Pages does for you.

There are various ways you can configure your GitHub repo to trigger a Jekyll build. One of them is to have a branch called gh-pages. You can push your entire Jekyll project (meaning all the Markdown files, Gemfile, _config.yml, etc.), without having to run jekyll build, and GitHub will automatically run jekyll build on its servers, and then serve the contents of the generated _site folder. But as we saw earlier, this uses the restrictive github-pages gem.

So, instead of letting GitHub build the site for us, we can do it on our own locally by running bundle exec jekyll build, and then pushing only the contents of the _site folder to the gh-pages branch. This requires that you have two separate branches: one for your Jekyll project (typically called master or main), and the gh-pages branch that is only used to hold the contents of the _site folder every time you build the site. Thatâ€™s all there is to it in order to use the latest Jekyll and any theme and plugin you want. 1

However, having to run bundle exec jekyll build from the main branch, and then switching to the gh-pages branch to push the latest _site can get tedious. Luckily, there is a solution that allows us to automate this process. We can use GitHub Actions, which is a feature that allows you to automate workflows based on certain events that happen on your repo. For example, we can create a workflow that automatically builds the site using the same version of Jekyll and other gems in our project, and deploys it every time we push to the main branch. It can also automatically create the gh-pages branch.

Letâ€™s test this out together step by step. To follow along, youâ€™ll need the following prerequisites:

A GitHub account.
A working Ruby development environment with Homebrew, chruby, ruby-install, Bundler, Git and the GitHub CLI. My script can set all of these up for you in minutes.
A configured Git environment, with your name, email, editor, and main as your default branch.
If you installed my script on or after December 25, 2020, you have Ruby 3.0.0, which isnâ€™t fully compatible with Jekyll yet, so youâ€™ll need to also install Ruby 2.7.2.
First, check if you already have Ruby 2.7.2:

chruby 2.7.2
If it doesnâ€™t say anything, you already have it. If it says unknown Ruby, youâ€™ll need to install it:

ruby-install ruby-2.7.2
Once we have our kitchen set up, we can start cooking. First, weâ€™ll create a new playground folder. This is where I put temporary projects for testing things out. If you followed some of my previous guides, you might already have this folder. If not, letâ€™s create it:

cd ~ # or wherever you keep your coding projects
mkdir playground && cd playground
Letâ€™s create a new folder called jekyll-github-actions and initialize it as a Git repository:

git init jekyll-github-actions && cd jekyll-github-actions
To make sure weâ€™re using Ruby 2.7.2, weâ€™ll switch to it:

chruby 2.7.2
And then we can create a new Jekyll project:

gem install bundler jekyll
jekyll new .
Next, weâ€™ll add a .ruby-version file so that the correct Ruby version is used whenever we cd into our jekyll-github-actions directory:

echo 'ruby-2.7.2' >> .ruby-version
To test that deploying through GitHub Actions works, weâ€™ll add a plugin that I know doesnâ€™t work with the github-pages gem, such as the jekyll-timeago plugin referenced in the Jekyll documentation.

Update your Gemfile so that it looks like this:

source "https://rubygems.org"
# Hello! This is where you manage which Jekyll version is used to run.
# When you want to use a different version, change it below, save the
# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:
#
#     bundle exec jekyll serve
#
# This will help ensure the proper Jekyll version is running.
# Happy Jekylling!

ruby "2.7.2"

gem "jekyll", "~> 4.2.0"
# This is the default theme for new Jekyll sites. You may change this to anything you like.
gem "minima", "~> 2.5"
# If you want to use GitHub Pages, remove the "gem "jekyll"" above and
# uncomment the line below. To upgrade, run `bundle update github-pages`.
# gem "github-pages", group: :jekyll_plugins
# If you have any plugins, put them here!
group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
  gem "jekyll-timeago", "~> 0.13.1"
end
Save the file, then run bundle install.

Open your Gemfile.lock, and look towards the bottom in the PLATFORMS section. If ruby is not listed, add it with this command:

bundle lock --add-platform ruby
To test that the jekyll-timeago plugin works, weâ€™ll update our index.markdown to make use of it:

---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
---

Testing the timeago plugin on GitHub Pages

{% assign date = '2020-04-13T10:20:00Z' %}

- Original date - {{ date }}
- With timeago filter - {{ date | timeago }}
To trigger a workflow, GitHub expects a YAML file inside the .github/workflows folder structure, so letâ€™s create it:

mkdir -p .github/workflows
touch .github/workflows/jekyll-github-pages.yml
The -p option allows us to create nested directories with mkdir.

Copy and paste the following into the jekyll-github-pages.yml file.

name: Build and Deploy a Jekyll Site to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  jekyll:
    runs-on: macos-latest
    steps:
      - name: ðŸ“‚ setup
        uses: actions/checkout@v2

        # include the lines below if you are using jekyll-last-modified-at
        # or if you would otherwise need to fetch the full commit history
        # however this may be very slow for large repositories!
        # with:
        # fetch-depth: '0'
      - name: ðŸ’Ž setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: ðŸ”¨ install dependencies & build site
        uses: limjh16/jekyll-action-ts@v2
        with:
          enable_cache: true

      - name: ðŸš€ deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: ./_site
          # if the repo you are deploying to is <username>.github.io, uncomment the line below.
          # if you are including the line below, make sure your source files are NOT in the "main" branch:
          # publish_branch: main
